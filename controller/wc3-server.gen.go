// Package controller provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package controller

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /groups)
	FindGroups(c *gin.Context)

	// (POST /groups)
	AddGroup(c *gin.Context)

	// (GET /groups/{id})
	FindGroup(c *gin.Context, id openapi_types.UUID)

	// (GET /leagues)
	FindLeagues(c *gin.Context)

	// (POST /leagues)
	AddLeague(c *gin.Context)

	// (GET /leagues/{id})
	FindLeague(c *gin.Context, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// FindGroups operation middleware
func (siw *ServerInterfaceWrapper) FindGroups(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindGroups(c)
}

// AddGroup operation middleware
func (siw *ServerInterfaceWrapper) AddGroup(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddGroup(c)
}

// FindGroup operation middleware
func (siw *ServerInterfaceWrapper) FindGroup(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindGroup(c, id)
}

// FindLeagues operation middleware
func (siw *ServerInterfaceWrapper) FindLeagues(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindLeagues(c)
}

// AddLeague operation middleware
func (siw *ServerInterfaceWrapper) AddLeague(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.AddLeague(c)
}

// FindLeague operation middleware
func (siw *ServerInterfaceWrapper) FindLeague(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.FindLeague(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/groups", wrapper.FindGroups)
	router.POST(options.BaseURL+"/groups", wrapper.AddGroup)
	router.GET(options.BaseURL+"/groups/:id", wrapper.FindGroup)
	router.GET(options.BaseURL+"/leagues", wrapper.FindLeagues)
	router.POST(options.BaseURL+"/leagues", wrapper.AddLeague)
	router.GET(options.BaseURL+"/leagues/:id", wrapper.FindLeague)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXQVPbOhD+Kzt67xjiAD3lxgPKZKYtzJQZDn0cFmttq5UlPWmdwPDy3zuS7YSQhIZO",
	"ofQUx/Fqv/322/2ce5Hb2llDhoMY34uQV1Rjujz13vp44bx15FlRup1bSfGzsL5GFmOhDB8eiIHgO0ft",
	"VyrJi/lA1BQClunp7sfAXplSzOcD4em/RnmSYvylPXP5/PXiMHvzlXKOZ51527h4Emp9Xojxl3vxt6dC",
	"jMVf2bKErMOffaJZGzEfPC5AyRX4TaPkEv0WgEpuAHU9H4gPhGVDz8LVhbwwsAUBaw1EWSuzoScDoROy",
	"yS4wBqJGFy7If0TOqx31YLCmjYkDIzcJHJmmjnVNDFx4W3oKAf6H98qoUNHDWpfBU2IbdkIw36CrZUPW",
	"iCIjT5BXxS6RaY9VTZsoeao+z887a0Y3QfGW2XlURbylTGHb8TSMOcfLFo74iLdwRTfkxUA0XouxqJhd",
	"GGdZoRtm8nt06zQqQ3IoaZrF7JJC7pVjZY0YiyMIqnaaAI2EgOny6GICbKHGbwRXx4fQkhhAIiPU1hNg",
	"nlMI6kbH+rTKyQR6AOvIYV4RHAxHa7hms9kQ089D68usiw3Zh8nx6afPp3sHw9Gw4lpHpEy+DufFZ/JT",
	"ldMPi1O1i5pq6si5Yh0jrtDnHguGyWQCe3CGNcGlx/xbomxKPrQ07A9Hw1HMaR0ZdEqMxWG6NRAOuUqa",
	"yco4dOmypNSFVSovKxVgprQGT9x4A6g1cEXQxgFXyEC3KjAoA7bxkDfek+FE7A0G+teIhMBjPDIOq3iv",
	"jDxr88btEJyNdMXkB6NRLwoyCQ46p1WeYrOvwZrl0k8riKlOgU/tsH6x9jJE7/GuVeEj3Wjd19VVoe8g",
	"sI27Kz1cYKP5WQCfwtUa1gYcjaFbRzmTBFo+42zY0KBjT8gUAMHQDFKpUFgPCMFRrgqVd1Jf68KRbJsg",
	"2g1Ngf+x8u6XVbd0tPUCW5hJOzOCGRqOs4lSxo+orgXkpXewb2i+Jpf9X4Z3K9ikCOjz/nYhzAf90Gb3",
	"Ss63Tu4ZMWAr55bpOjofxWnmKpGsJDhvp0qSfGpI07rwWBOTD+mFYTXR5ARs0SeyUFA02LjgxTjtGdEb",
	"jUjGvNrRwQOKfvQmcf07lsVDz1qt+9zQcsbKPuzd6N3L6+KyIk+gAhjbEZ9WMC3mp1RTMjA5eRNqbV/T",
	"fsJjusAHJrNFp52Zv4qbLF6Hd7KTvoQ/1E+2W8fKhn4B7+hp3kBrtIkomRWAr2cU25G1zX5bVtEJcBev",
	"6OD/rFksWrGDW/Sp/ni7WNsGO/qFXsS9umF03L9Zx4j/P8lPe/ks/2qNs0zbHHVlAw/DDMuS/FDZDJ3K",
	"pvtifj3/HgAA///wmxUkHhIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
